//////////////////////////////////////////////////////
//          Caffeine Music by YokochaYokoha         //
//              System Script Rev.1.0               //
//          Works by Y.Yokoha Studio Project        //
//              üÑ´2024 YokochaYokoha                //
//         Licensed under Y.Yokoha B License       //
/////////////////////////////////////////////////////


//Register Components/„Ç≥„É≥„Éù„Éº„Éç„É≥„ÉàÁôªÈå≤
const dropArea = document.getElementById('drop-area');
const fileInput = document.getElementById('file-input');
const folderInput = document.getElementById('folder-input');
const readfile = document.getElementById('file-input');
const readfolder = document.getElementById('folder-input');
const audioPlayer = document.getElementById('audio-player');
const playPauseButton = document.getElementById('play-pause-button');
const seekBar = document.getElementById('seek-bar');
const speedControl = document.getElementById('speed-control');
const timeInfo = document.getElementById('time0');
const timetotal=document.getElementById("time1");
const titlePlaceholder = document.getElementById('title');
const artistPlaceholder = document.getElementById('artist');
const albumPlaceholder = document.getElementById('album');
const albumArtPlaceholder = document.getElementById('album-art');
const lyricsDiv = document.getElementById('lyrics');
const playlistDiv = document.getElementById('playlist');
const spdcon=document.getElementById("spd");
const previousButton = document.getElementById('prev-button');
const nextButton = document.getElementById('next-button');
const vcon = document.getElementById('volume-control');
//Variables/Â§âÊï∞
let playlist = [];
let currentIndex = 0;
let isPlaying = false;

//Throw them 2 mediastore/„É°„Éá„Ç£„Ç¢„Çπ„Éà„Ç¢„Å´„Éë„Çπ„Åó„Åæ„Åô
readfile.addEventListener("change",()=>mstore(readfile.files));
readfolder.addEventListener("change",()=>mstore(readfolder.files));

//Show Drop-Div/„Éâ„É≠„ÉÉ„Éó„ÇíÂèó„ÅëÊ≠¢„ÇÅ„Çãdiv„ÇíË°®Á§∫
//CSS„ÅÆActive„ÇØ„É©„ÇπÁô∫Âãï
document.addEventListener("dragenter",()=>
{
    dropArea.classList.add("active");
}
);

//Hide Drop-Div/„Éâ„É≠„ÉÉ„ÉóÂèó„ÅëÂÖ•„Çådiv„ÇíÈö†„Åô
// null‚Üí„Éû„Ç¶„Çπ„ÅåÂ§ñ„Å´„ÅÇ„Çã„Å®null„ÇíËøî„Åô„Åü„ÇÅ„Åß„Åô„ÄÇ
// ||‚Üíor  //dropA...rget))„ÅÆÂâç„Å´"!"„ÅÇ„Çä„ÄÇ„Åì„Çå„ÅßTFÂÖ•„ÇåÊõø„Åà(Revert!)
//CSS class remove
document.addEventListener("dragleave",(event)=>
{
    if(event.relatedTarget===null||!dropArea.contains(event.relatedTarget))
    {
        dropArea.classList.remove("active");
    }
}
);

//Prevent&Disable default "Drag&Drop" function of Browsers/„Éñ„É©„Ç¶„Ç∂„Éº„Éá„Éï„Ç©„É´„ÉàÂãï‰Ωú„ÇíÁÑ°ÂäπÂåñ
document.addEventListener("dragover",(event)=>
{
    event.preventDefault();
}
);

//Cope with Drop/„Éâ„É≠„ÉÉ„Éó„Å∏„ÅÆÂØæÂøú

document.addEventListener("drop",(event)=>
{
    event.preventDefault();//„Éñ„É©„Ç¶„Ç∂„Éº„Éá„Éï„Ç©„É´„ÉàÂãï‰Ωú„ÇíÁÑ°ÂäπÂåñ
    dropArea.classList.remove("active");//Hide Drop-Div
    const musicfiles=event.dataTransfer.items;//Gets files via Browser
    processtask(musicfiles);//Pass the files
}
);

//Retrieve Audio files in selected folder(s) and register files to the Playlist/„Ç™„Éº„Éá„Ç£„Ç™„Éï„Ç°„Ç§„É´„ÅÆ„Åø„Éï„Ç°„Ç§„É´„Åã„ÇâÊäΩÂá∫„Åó„ÄÅ„Éó„É¨„Ç§„É™„Çπ„ÉàÂåñ
async function processtask(musicfiles)
{
    playlist=[]; //Initalize!
    for(const items of musicfiles)//forÊñá
    {
        const entry=items.webkitGetAsEntry();//„Ç®„É≥„Éà„É™„Éº(„Éï„Ç°„Ç§„É´„Å®„Éï„Ç©„É´„ÉÄ„ÉºÊ∑∑Âêà„ÅÆ„Ç™„Éñ„Ç∏„Çß„ÇØ„Éà)„Å®„Åó„Å¶read
        if(entry)//Checks whether entry is empty or not
        {
            if(entry.isFile)
            {
                const afiles=await new Promise((res)=>entry.file(res));
                if(afiles.type.startsWith("audio/")) //distinguish Audio files by mime type
                {
                    playlist.push(afiles); //Add 2 Playlist!/„Éó„É¨„Ç§„É™„Çπ„ÉàÁôªÈå≤Âá¶ÁêÜ
                }
            }
            else if (entry.isDirectory)
            {
                await readDir(entry);//Throw 2 Directory Extractor 
            }
        }
    }
    if(playlist.length>0)//Prevent unexpected No list Err/„É™„Çπ„Éà„Å´„Éï„Ç°„Ç§„É´„Åå„Å™„ÅÑÂ†¥Âêà„ÅÆ‰∫àÊúü„Åõ„Å¨„Ç®„É©„Éº„ÇíÂõûÈÅø
    {
        currentIndex=0; //Init(Select:Track1)
        updateplaylistDSP();//Update playlist GUI/„Éó„É¨„Ç§„É™„Çπ„ÉàGUI„ÇíÊõ¥Êñ∞
        loadAudio(playlist[currentIndex]);//Send "play signal" (Track1 is selected by default)/ÂÜçÁîü‰ø°Âè∑ÈÄÅ‰ø°(‰∏ÄÊõ≤ÁõÆ„Åã„Çâ)
    }
}


//Directory Extractor/„Éá„Ç£„É¨„ÇØ„Éà„É™Â±ïÈñã
async function readDir(directoryEntry) //recieve await readDir(entry)'s "entry"& store it 2 directoryEntry
{
    const reader=directoryEntry.createReader(); //Prepare Dir Reader/„Éá„Ç£„É¨„ÇØ„Éà„É™Ë™≠„ÅøÂèñ„ÇäÊ©üËÉΩ„ÇíÊ∫ñÂÇô
    const foldercontents=await new Promise((resolve)=>reader.readEntries(resolve));//Read contents in the folder
    for (const entry of foldercontents)
    {
        if(entry.isFile)// Same code
            {
                const afiles=await new Promise((res)=>entry.file(res));
                if(afiles.type.startsWith("audio/")) //distinguish Audio files by mime type
                {
                    playlist.push(afiles); //Add 2 Playlist!/„Éó„É¨„Ç§„É™„Çπ„ÉàÁôªÈå≤Âá¶ÁêÜ
                }
            }
            else if (entry.isDirectory)
            {
                await readDir(entry);//Â∏∞Á¥çÁöÑ„Å´Ë™≠„ÇÄ
            }
    }
}

//MediaStore register(Add2Playlist) /„É°„Éá„Ç£„Ç¢„Çπ„Éà„Ç¢„ÅÆÁôªÈå≤Âá¶ÁêÜ(„Éó„É¨„Ç§„É™„Çπ„Éà„Å´ÂÖ•„Çå„Çã)
function mstore(files)
{
    playlist = Array.from(files).filter(file => file.type.startsWith('audio/'));//Extract only audio files,convert file list 2 Array(Playlist),then register
    if(playlist.length>0)
    {//same code
        currentIndex=0; //Init(Select:Track1)
        updateplaylistDSP();//Update playlist GUI/„Éó„É¨„Ç§„É™„Çπ„ÉàGUI„ÇíÊõ¥Êñ∞
        loadAudio(playlist[currentIndex]);//Send "play signal" (Track1 is selected by default)/ÂÜçÁîü‰ø°Âè∑ÈÄÅ‰ø°(‰∏ÄÊõ≤ÁõÆ„Åã„Çâ)  
    }

}

//Loads file! /„Éï„Ç°„Ç§„É´Ë™≠„ÅøËæº„Åø!
function loadAudio(file)
{
    audioPlayer.src=URL.createObjectURL(file);//URLÂåñ„Åó„Å¶Core(Audio„Çø„Ç∞„ÅÆ„Ç®„É¨„É°„É≥„Éà)„Å´ÈÄÅ‰ø°
    audioPlayer.load();//Ë™≠„Åæ„Åõ„Çã
    DSPmetadata(file);//Retrieve Metadata
    audioPlayer.play();
    isPlaying=true;//Switch the status!
    playPauseButton.src="pause.png";//„Éú„Çø„É≥ËøΩÂæì
}

//Retrieve MetaData Powered by jsmediatags!(Thanks a lot!!)/„É°„Çø„Éá„Éº„ÇøÊäΩÂá∫ by jsmediatags(Ë™†„Å´„ÅÇ„Çä„Åå„Å®„ÅÜ„Åî„Åñ„ÅÑ„Åæ„Åô!!)
function DSPmetadata(file)
{
    jsmediatags.read(file,//„Åì„Åì„Åã„ÇâjsmediatagsÂ∞ÇÁî®Áã¨Ëá™Âãï‰Ωú(„Ç≥„É°„É≥„Éà„Ç¢„Ç¶„ÉàË™¨ÊòéÁúÅÁï•)[jsmediatags dedicated function]
        {
            onSuccess: (tag)=>
                {
                    const { title, artist, album, picture } = tag.tags;
                    titlePlaceholder.textContent = title || "Music(„Çø„Ç§„Éà„É´ÊÉÖÂ†±‰∏çÊòé)";
                    artistPlaceholder.textContent = artist || "„Ç¢„Éº„ÉÜ„Ç£„Çπ„ÉàÂêç‰∏çÊòé";
                    albumPlaceholder.textContent = album || "„Ç¢„É´„Éê„É†Âêç‰∏çÊòé";
                    if (picture) 
                        {
                        const base64String = btoa(new Uint8Array(picture.data).reduce((data, byte) => data + String.fromCharCode(byte), ''));
                        albumArtPlaceholder.src = `data:${picture.format};base64,${base64String}`;
                    } 
                    else 
                    {
                        albumArtPlaceholder.src = "art.png";
                    }
                    updateBackground(picture);
                    initsys();
                },
                onError: (error) => 
                    {
                    console.error("Failed to Retrieve Metadata in the file/„É°„Çø„Éá„Éº„ÇøË™≠„ÅøÂèñ„ÇäÂ§±Êïó(„Ç®„É©„Éº„Éè„É≥„Éâ„É©„Éº):", error);
                    titlePlaceholder.textContent =  "Music";
                    artistPlaceholder.textContent = "„Ç¢„Éº„ÉÜ„Ç£„Çπ„ÉàÂêç‰∏çÊòé";
                    albumPlaceholder.textContent = "„Ç¢„É´„Éê„É†Âêç‰∏çÊòé";
                    updateBackground(null);
                }
                }
        

    );
}

//Update Playlist GUI/„Éó„É¨„Ç§„É™„Çπ„ÉàGUI„ÅÆ‰ΩúÊàê„Å®Êõ¥Êñ∞
function updateplaylistDSP() 
{
    playlistDiv.innerHTML = "";
    playlist.forEach((file, index) => {//„Åì„Åì„Åã„Çâ
        const item = document.createElement('div');
        item.className = 'marks-r-o';//CaffeineCSS Rev3.0 Text 2 Marks Div
        item.innerHTML = `<img src="music.png" alt="Êõ≤" style="width:20px;"><p><span>${file.name}</span></p>`;
        
        item.addEventListener('click', () => {//Êõ≤„ÇíÊåáÂÆö„Åó„Å¶ÂÜçÁîü
            currentIndex = index;
            loadAudio(file);
        });

        playlistDiv.appendChild(item);

    });//„Åì„Åì„Åæ„Åß
}

//Button Event Handlers
//„Ç§„Éô„É≥„Éà„Éè„É≥„Éâ„É©ËøΩÂä†
playPauseButton.addEventListener('click', () => 
    {
    if (audioPlayer.paused) {
        audioPlayer.play();
        isPlaying = true;//rewrite
        playPauseButton.src = "pause.png";//Stop mark
    } else {
        audioPlayer.pause();
        isPlaying = false;//rw
        playPauseButton.src = "play.png";//start mark!
    }
});

//Refrect progress(sync)
//„Ç∑„Éº„ÇØ„Éê„Éº„Å®ÂêåÊúü
     //Manual moveËøΩÂæì
seekBar.addEventListener("input",()=>
{
    audioPlayer.currentTime=seekBar.value;
}
);

//Gain controler(Volume)
//„Ç≤„Ç§„É≥„Ç≥„É≥„Éà„É≠„Éº„É´(Èü≥Èáè)
audioPlayer.volume = vcon.value;
vcon.addEventListener('input', () => {
    audioPlayer.volume = vcon.value;

});

//Show current Track time
//ÁèæÂú®„ÅÆ„Éà„É©„ÉÉ„ÇØ„ÅÆÊôÇÈñì„ÇíË°®Á§∫
 audioPlayer.addEventListener('timeupdate', () => 
    {
 seekBar.max = audioPlayer.duration;
 seekBar.value = audioPlayer.currentTime;
 timeInfo.innerText = mktime(audioPlayer.currentTime) ;
 timetotal.innerText=mktime(audioPlayer.duration);
    });

//SpeedControler Tracking
//„Çπ„Éî„Éº„Éâ„Ç≥„É≥„Éà„É≠„Éº„É©„ÉºËøΩÂæì
    speedControl.addEventListener('input', () => {
        audioPlayer.playbackRate = speedControl.value;
        spdcon.innerText="Speed:"+speedControl.value+"x";
    });

//Procedure of making well-known time display(min:sec format)
//„Çà„ÅèË¶ã„Åã„Åë„ÇãÂàÜ:ÁßíË°®Á§∫ÁîüÊàêÊâãÁ∂ö„Åç
function mktime(sec)
{
const min=Math.floor(sec/60);//Áßí„Çí60„ÅßÂâ≤„Å£„Å¶Â∞èÊï∞ÁÇπÂàá„ÇäÊç®„Å¶=>ÂàÜÊï∞„ÅÆ„ÅøÂèñÂæó
const sc=Math.floor(sec%60);//ÂÖà„Åª„Å©„ÅÆË®àÁÆó„ÅÆ‰Ωô„Çä„ÇíÂèñÂæó=>ex: 90/60=1...30 30Áßí„Åß„Åô„ÄÇ„Åì„Çå„ÇÇÂ∞èÊï∞ÁÇπÂàá„ÇäÊç®„Å¶
return `${min}:${sc < 10 ? "0" : ""}${sc}`;//Ëøî„ÇäÂÄ§ ÂàÜ:(10ÁßíÊú™Ê∫Ä„ÅÆÁßíÊï∞„Å™„ÇâÂÖàÈ†≠„Å´0‰ªòÂä†„ÄÇ„Åù„ÅÜ„Åß„Å™„Åë„Çå„Å∞‰Ωï„ÇÇ„Å§„Åë„Å™„ÅÑ)+Áßí
}

//Move 2 next Track
//Ê¨°„ÅÆ„Éà„É©„ÉÉ„ÇØ„Å∏
audioPlayer.addEventListener('ended', () => {
    currentIndex = (currentIndex + 1) % playlist.length;// 2/10„Å†„Å® 0...2„ÄÇ„Çà„Å£„Å¶2„Å®„Å™„Çä3Êõ≤ÁõÆ„ÅåÊµÅ„Åï„Çå„Åæ„Åô„ÄÇ(1Êõ≤ÁõÆ„ÅØÈÖçÂàó0)
    loadAudio(playlist[currentIndex]);
});

//Broadcast Media info 2 Client OS via Browser
//„Éñ„É©„Ç¶„Ç∂„ÉºÁµåÁî±„Åß„É¶„Éº„Ç∂„Éº„ÅÆOS„Å∏Ê•ΩÊõ≤ÊÉÖÂ†±‰ºùÈÅî
//Omit comments.. a little bit cumbersome...
function initsys()
{


    if ('mediaSession' in navigator) {
        navigator.mediaSession.metadata = new MediaMetadata({
            title: titlePlaceholder.textContent,
            artist: artistPlaceholder.textContent,
            album: albumPlaceholder.textContent,
            artwork: [
                { src: albumArtPlaceholder.src, sizes: '96x96', type: 'image/png' },
                { src: albumArtPlaceholder.src, sizes: '128x128', type: 'image/png' },
                { src: albumArtPlaceholder.src, sizes: '192x192', type: 'image/png' },
                { src: albumArtPlaceholder.src, sizes: '256x256', type: 'image/png' },
                { src: albumArtPlaceholder.src, sizes: '384x384', type: 'image/png' },
                { src: albumArtPlaceholder.src, sizes: '512x512', type: 'image/png' },
            ]
        });
    
        navigator.mediaSession.setActionHandler('play', () => {
            audioPlayer.play();
            playPauseButton.src = "pause.png";
        });
        navigator.mediaSession.setActionHandler('pause', () => {
            audioPlayer.pause();
            playPauseButton.src = "play.png";
        });
        navigator.mediaSession.setActionHandler('previoustrack', () => {
            currentIndex = (currentIndex - 1 + playlist.length) % playlist.length;
            loadAudio(playlist[currentIndex]);
        });
        navigator.mediaSession.setActionHandler('nexttrack', () => {
            currentIndex = (currentIndex + 1) % playlist.length;
            loadAudio(playlist[currentIndex]);
        });
    }
}

//Set Wallpaper(Change Background img)
//Â£ÅÁ¥ôË®≠ÂÆö
function updateBackground(picture) {
    const body = document.body;
    
    if (picture) {

        const base64String = btoa(new Uint8Array(picture.data).reduce((data, byte) => data + String.fromCharCode(byte), ''));
        const imageUrl = `data:${picture.format};base64,${base64String}`;
        body.style.backgroundImage = `url(${imageUrl})`;
        body.style.backgroundPosition = 'center';     
        body.style.backgroundSize = 'cover';          
        body.style.backgroundRepeat = 'no-repeat';
        body.style.backgroundAttachment = 'fixed';    
        body.style.backdropFilter = 'blur(10px)';     
    } else {
        body.style.backgroundImage = ''; 
        body.style.backdropFilter = 'none';
        body.style.backgroundAttachment = ''; 
    }
}

//Back 2 previous Music
//Ââç„ÅÆÈü≥Ê•Ω„Å∏
previousButton.addEventListener('click', () => {
    currentIndex = (currentIndex - 1 + playlist.length) % playlist.length; 
    loadAudio(playlist[currentIndex]);
});

//Move 2 next Music
//Ê¨°„ÅÆÈü≥Ê•Ω„Å∏
nextButton.addEventListener('click', () => {
    currentIndex = (currentIndex + 1) % playlist.length;
    loadAudio(playlist[currentIndex]);
});


